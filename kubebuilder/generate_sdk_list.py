import requests
import os
from dataclasses import dataclass
from tqdm import tqdm
from typing import List
import json


@dataclass
class ReleaseItem:
    version: str
    linux_amd64_checksum: str
    darwin_amd64_checksum: str
    darwin_arm64_checksum: str


def main():
    items = fetch_release_items()
    generate_sdk_list(items)


def fetch_release_items():
    if "GH_ACCESS_TOKEN" not in os.environ:
        print("You need to get an access token following the instructions in \n https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token")
        exit(1)
    access_token = os.getenv("GH_ACCESS_TOKEN")
    releases_response = requests.get('https://api.github.com/repos/kubernetes-sigs/kubebuilder/releases', headers={
        "Accept": "application/vnd.github+json",
        "Authorization": f"token {access_token}"
    })

    items = []
    for release in tqdm(releases_response.json()):
        checksum_asset = [x for x in release["assets"]
                          if x["name"] == "checksums.txt"][0]
        checksum_response = requests.get(
            checksum_asset["browser_download_url"])
        checksum_dic = checksum_text_to_dic(checksum_response.text)
        linux_amd64_key = get_key_containing(
            list(checksum_dic.keys()), "linux_amd64")
        darwin_amd64_key = get_key_containing(
            list(checksum_dic.keys()), "darwin_amd64")
        darwin_arm64_key = get_key_containing(
            list(checksum_dic.keys()), "darwin_arm64")

        if darwin_arm64_key:
            items.append(ReleaseItem(
                release["tag_name"], checksum_dic[linux_amd64_key], checksum_dic[darwin_amd64_key], checksum_dic[darwin_arm64_key]))
        else:
            items.append(ReleaseItem(
                release["tag_name"], checksum_dic[linux_amd64_key], checksum_dic[darwin_amd64_key], None))

    return items


def generate_sdk_list(items: List[ReleaseItem]):
    result = """## Useful constants. Generated by generate_sdk_list.py

DEFAULT_VERSION = "2.3.1"

SDK_VERSION_SHA256 = {
"""
    sdk_dic = {}
    for item in items:
        if item.darwin_arm64_checksum:
            sdk_dic[item.version.replace("v","")] = {
                "linux_amd64": item.linux_amd64_checksum,
                "darwin_amd64": item.darwin_amd64_checksum,
                "darwin_arm64": item.darwin_arm64_checksum,
            }
        else:
            sdk_dic[item.version.replace("v","")] = {
                "linux_amd64": item.linux_amd64_checksum,
                "darwin_amd64": item.darwin_amd64_checksum,
            }
    result += remove_first_line(json.dumps(sdk_dic, indent=4))
    with open("sdk_list.bzl", "w") as f:
        f.write(result)
    print("output: sdk_list.bzl")


def checksum_text_to_dic(text):
    splitted_texts = text.split("\n")
    result = {}
    for pair in splitted_texts:
        split_pair = pair.split("  ")
        if len(split_pair) == 2:
            result[split_pair[1]] = split_pair[0]
    return result


def get_key_containing(keys, word):
    cands = [key for key in keys if word in key]
    if len(cands) == 1:
        return cands[0]
    return ""


def remove_first_line(text):
    tmp = text.split("\n")
    return "\n".join(tmp[1:])


if __name__ == "__main__":
    main()
